components:
  schemas:
    Product:
      type: object
      properties:
        title:
          type: string
          description: Title of the product
        description:
          type: string
          description: Description of the product
        photo:
          type: string
          description: URL of the product photo
        price:
          type: number
          description: Price of the product
        stock:
          type: integer
          description: Available stock of the product
        owner_id:
          type: string
          description: ID of the product owner
        role:
          type: integer
          description: Role required to access the product
          enum: [1, 2]
      example:
        title: T-shirt
        description: Cotton T-shirt with print.
        photo: https://example.com/tshirt.jpg
        price: 19.99
        stock: 50
        owner_id: "7c62406fdd4964eb7c488b08"
        role: 1

  responses:
    product:
      res201:
        description: Product successfully created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      res401:
        description: Product already exists
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: Error message
                payload:
                  $ref: '#/components/schemas/ErrorPayload'
      res404:
        description: Not found
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: Error message
                payload:
                  $ref: '#/components/schemas/ErrorPayload'
      res500:
        description: Fatal
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: Error message
                payload:
                  $ref: '#/components/schemas/ErrorPayload'

paths:
  /api/products:
    post:
      summary: Create a product
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          $ref: '#/components/responses/product/res201'
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          $ref: '#/components/responses/product/res401'
        '500':
          $ref: '#/components/responses/product/res500'

    get:
      summary: Get all products
      tags:
        - Products
      responses:
        '200':
          description: Successfully retrieved list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          $ref: '#/components/responses/product/res500'

  /api/products/{id}:
    get:
      summary: Get a product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the product to retrieve
      responses:
        '200':
          description: Successfully retrieved product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/product/res404'
        '500':
          $ref: '#/components/responses/product/res500'

    put:
      summary: Update a product
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the product to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          $ref: '#/components/responses/product/res401'
        '404':
          $ref: '#/components/responses/product/res404'
        '500':
          $ref: '#/components/responses/product/res500'

    delete:
      summary: Delete a product
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the product to delete
      responses:
        '204':
          description: Product deleted successfully
        '401':
          $ref: '#/components/responses/product/res401'
        '404':
          $ref: '#/components/responses/product/res404'
        '500':
          $ref: '#/components/responses/product/res500'
